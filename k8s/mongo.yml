apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: standard
  hostPath:
    path: /data/
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  volumeName: mongo-pv
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
apiVersion: apps/v1
kind: Deployment 
metadata:
  name: my-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-db
  template:
    metadata:
      labels:
        app: my-db
    spec:
      containers:
      - name: my-db
        imagePullPolicy: IfNotPresent
        image: shourovroy/motonok-dbs:latest
        command:
          - "mongod"
        args:
          - "--auth"
          - "--replSet"
          - "rs0"
          - "--keyFile" 
          - "/etc/mongo-keyfile"
          - "--bind_ip_all"
          - "--port"
          - "27017"
          - "--dbpath"
          - "/data/db"
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
        ports:
        - containerPort: 27017
        volumeMounts:
        - mountPath: /data/db
          name: mongo-db-path-vol
      volumes:
      - name: mongo-db-path-vol
        persistentVolumeClaim:
          claimName: mongo-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-db-svc
spec:
  selector:
    app: my-db
  type: LoadBalancer
  ports:
  - port: 27017
    targetPort: 27017
  

# db.createUser(
#   {
#     user: "shourov",
#     pwd: "roy",
#     roles: [ { role: "root", db: "admin" } ]
#   }
# )

# rs.initiate(
#    {
#       _id: "rs0",
#       version: 1,
#       members: [
#          { _id: 0, host : "127.0.0.1:27017" }
#       ]
#    }
# )